:orphan:

.. title:: VANILLA_MBEDTLS_DHM_C

.. option:: CONFIG_VANILLA_MBEDTLS_DHM_C

*mbed TLS vanilla*

Type: ``bool``

Help
====

Enable the DHM module from mbed TLS vanilla.
MBEDTLS_DHM_C setting in mbed TLS config file.

Direct dependencies
===================

\ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>` && \ :option:`NORDIC_SECURITY_BACKEND <CONFIG_NORDIC_SECURITY_BACKEND>`

*(Includes any dependencies from ifs and menus.)*

Defaults
========

No defaults. Implicitly defaults to ``n``.

Symbols selected by this symbol
===============================

- \ :option:`GLUE_MBEDTLS_DHM_C <CONFIG_GLUE_MBEDTLS_DHM_C>` if \ :option:`CC310_MBEDTLS_DHM_C <CONFIG_CC310_MBEDTLS_DHM_C>`
- \ :option:`NRF_CRYPTO_GLUE_LIBRARY <CONFIG_NRF_CRYPTO_GLUE_LIBRARY>` if \ :option:`CC310_MBEDTLS_DHM_C <CONFIG_CC310_MBEDTLS_DHM_C>`

Kconfig definition
==================

.. highlight:: kconfig

At ``C:/Git/ncs/nrfxlib\nrf_security/Kconfig:522``

Included via ``C:/Git/ncs/nrfxlib/Kconfig.nrfxlib:14``

Menu path: (Top) → Nordic nrfxlib → Nordic Security → Use Nordic provided security backend → DHM   - Diffie-Hellman-Merkel

.. parsed-literal::

    config VANILLA_MBEDTLS_DHM_C
    	bool "mbed TLS vanilla" if \ :option:`MBEDTLS_VANILLA_BACKEND <CONFIG_MBEDTLS_VANILLA_BACKEND>`
    	select \ :option:`GLUE_MBEDTLS_DHM_C <CONFIG_GLUE_MBEDTLS_DHM_C>` if \ :option:`CC310_MBEDTLS_DHM_C <CONFIG_CC310_MBEDTLS_DHM_C>`
    	select \ :option:`NRF_CRYPTO_GLUE_LIBRARY <CONFIG_NRF_CRYPTO_GLUE_LIBRARY>` if \ :option:`CC310_MBEDTLS_DHM_C <CONFIG_CC310_MBEDTLS_DHM_C>`
    	depends on \ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>` && \ :option:`NORDIC_SECURITY_BACKEND <CONFIG_NORDIC_SECURITY_BACKEND>`
    	help
    	  Enable the DHM module from mbed TLS vanilla.
    	  MBEDTLS_DHM_C setting in mbed TLS config file.

*(The 'depends on' condition includes propagated dependencies from ifs and menus.)*