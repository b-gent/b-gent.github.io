:orphan:

.. title:: MBEDTLS_CIPHER_MODE_CFB

.. option:: CONFIG_MBEDTLS_CIPHER_MODE_CFB

*AES-CFB - AES Cipher Feedback mode*

Type: ``bool``

Help
====

Enable the AES Cipher Feedback mode (CFB) mode,
MBEDTLS_CIPHER_MODE_CFB setting in mbed TLS config file.

Direct dependencies
===================

((\ :option:`MBEDTLS_AES_C <CONFIG_MBEDTLS_AES_C>` && !\ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>`) || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>` || \ :option:`CC310_MBEDTLS_AES_C <CONFIG_CC310_MBEDTLS_AES_C>`) && \ :option:`MBEDTLS_AES_C <CONFIG_MBEDTLS_AES_C>` && \ :option:`NORDIC_SECURITY_BACKEND <CONFIG_NORDIC_SECURITY_BACKEND>`

*(Includes any dependencies from ifs and menus.)*

Default
=======

- y

Symbols selected by this symbol
===============================

- \ :option:`MBEDTLS_CIPHER_AES_256_CFB_C <CONFIG_MBEDTLS_CIPHER_AES_256_CFB_C>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>` || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>`
- \ :option:`MBEDTLS_CIPHER_AES_256_CFB_C <CONFIG_MBEDTLS_CIPHER_AES_256_CFB_C>` if \ :option:`MBEDTLS_VANILLA_BACKEND <CONFIG_MBEDTLS_VANILLA_BACKEND>` && !\ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>`
- \ :option:`GLUE_MBEDTLS_CIPHER_MODE_CFB <CONFIG_GLUE_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>` || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>`
- \ :option:`CC310_MBEDTLS_CIPHER_MODE_CFB <CONFIG_CC310_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>`
- \ :option:`VANILLA_MBEDTLS_CIPHER_MODE_CFB <CONFIG_VANILLA_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>`

Kconfig definition
==================

.. highlight:: kconfig

At ``C:/Git/ncs/nrfxlib\nrf_security/Kconfig:289``

Included via ``C:/Git/ncs/nrfxlib/Kconfig.nrfxlib:14``

Menu path: (Top) → Nordic nrfxlib → Nordic Security → Use Nordic provided security backend → AES   - Advanced Encryption Standard

.. parsed-literal::

    config MBEDTLS_CIPHER_MODE_CFB
    	bool "AES-CFB - AES Cipher Feedback mode"
    	default y
    	select \ :option:`MBEDTLS_CIPHER_AES_256_CFB_C <CONFIG_MBEDTLS_CIPHER_AES_256_CFB_C>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>` || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>`
    	select \ :option:`MBEDTLS_CIPHER_AES_256_CFB_C <CONFIG_MBEDTLS_CIPHER_AES_256_CFB_C>` if \ :option:`MBEDTLS_VANILLA_BACKEND <CONFIG_MBEDTLS_VANILLA_BACKEND>` && !\ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>`
    	select \ :option:`GLUE_MBEDTLS_CIPHER_MODE_CFB <CONFIG_GLUE_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>` || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>`
    	select \ :option:`CC310_MBEDTLS_CIPHER_MODE_CFB <CONFIG_CC310_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>`
    	select \ :option:`VANILLA_MBEDTLS_CIPHER_MODE_CFB <CONFIG_VANILLA_MBEDTLS_CIPHER_MODE_CFB>` if \ :option:`GLUE_MBEDTLS_AES_C <CONFIG_GLUE_MBEDTLS_AES_C>`
    	depends on ((\ :option:`MBEDTLS_AES_C <CONFIG_MBEDTLS_AES_C>` && !\ :option:`NRF_CRYPTO_BACKEND_COMBINATION_0 <CONFIG_NRF_CRYPTO_BACKEND_COMBINATION_0>`) || \ :option:`VANILLA_MBEDTLS_AES_C <CONFIG_VANILLA_MBEDTLS_AES_C>` || \ :option:`CC310_MBEDTLS_AES_C <CONFIG_CC310_MBEDTLS_AES_C>`) && \ :option:`MBEDTLS_AES_C <CONFIG_MBEDTLS_AES_C>` && \ :option:`NORDIC_SECURITY_BACKEND <CONFIG_NORDIC_SECURITY_BACKEND>`
    	help
    	  Enable the AES Cipher Feedback mode (CFB) mode,
    	  MBEDTLS_CIPHER_MODE_CFB setting in mbed TLS config file.

*(The 'depends on' condition includes propagated dependencies from ifs and menus.)*